
#include <cctype> need to include when using isupper() and islower()
Inside of isupper() and islower() can be a character 'c' or a character variable
Beside of these 2 member function, we also have isdigit():  which return true if char is a number
isalpha(): return true if char is in alphabet

c string is a string that store in char array

#include <cstring> is need when using c string, with is different from normal string
Define cstring: 
  char name[] = "This is a random sentences."
can use subscript to access each element of c string

#include<cstring> also critical when using cstring member function
Ex: int length
    length = strlen(something);
something must be one of the following:
  + a name of the array holding the ctring
	  Ex: char name[] = "I am a Crab"; then something can be name
	+ A pointer variable that hold address of C string
	  Ex: char* ptr = name; then something can be ptr
		IMPORTANT: strlen() do not accept nornal string variable
	+ a literal string
Reason: strlen() or cstring menber function as general only access address;
	
strcat: Concatenates, or appends one string to another
Ex:
  const int size = 13;
  char string1[size] = "Hello ";
  char string2[] = "World!";
  strcat(string1, strin2);
  cout << string1 << endl;
Result: Hello World
Note:
  + it is the programmer's responsibility to make sure there is a white space between two string
	+ size of string1 must large enough to hold both string after concatenation
	+ Algorith to make sure we have enough space:
	____________________________________________________________________
	  if (sizeof(string1) >= (strlen(string1) + strlen(string2) + 1)) {
		  strcat(string1, string2);
		} else {
		  cout << "String1 is not large enough for both string.\n";
		}
  _____________________________________________________________________
	Explain: We use sizeof() at the beginnign because if return the size of string1 in byte, also each character occupies one byte to it make sense here
	         strlen() return the number of character that c string hold, which not include null character at the end of the concatenated string, but sizeof() include null
					 that is why whe have to add 1 in the left of the operator.


strcpy: member function used to coppy one string to another, which normal array cannot do, overide if string1 is already stored something.
Ex: 
const int SIZE = 10; 
char string1[SIZE] = "Hello", string2[SIZE] = "World!"; 
cout << string1 << endl; 
cout << string2 << endl; 
strcpy(string1, string2); 
cout << string1 << endl; 
cout << string2 << endl; 
Output:
Hello 
World! 
World! 
World!


Use strncat() and strncpy instead of strcat and strcpy
strncat():
int maxChars; 
const int SIZE_1 = 17; 
const int SIZE_2 = 18; 
 
char string1[SIZE_1] = "Welcome "; 
char string2[SIZE_2] = "to North Carolina"; 
 
cout << string1 << endl; 
cout << string2 << endl; 
maxChars = sizeof(string1) − (strlen(string1) + 1); 
strncat(string1, string2, maxChars); 
cout << string1 << endl; 
strncpy():
int maxChars; 
const int SIZE = 11; 
 
char string1[SIZE]; 
char string2[] = "I love C++ programming!"; 
 
maxChars = sizeof(string1) − 1; 
strncpy(string1, string2, maxChars); 
// Put the null terminator at the end. 
string1[maxChars] = '\0'; Because strncpy do not automatically place null terminator if maxChars is less than or equal lenght
cout << string1 << endl; 
