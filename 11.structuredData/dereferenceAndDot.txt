. has higher precedence than * so
*cirPtr.radius: * will dereference cirPtr.radius
(*cirPtr).radius will work, which can be conveniently rewritten as cirPtr->radius

-> used to dereference pointer to structure


  struct GradeInfo  
     { 
        string name;                // Student names 
        int *testScores;            // Dynamically allocated array 
        float average;              // Test average 
     }; 
-----------------------------student1 is a normal varibale-------------------------- 
The following statement will display the value pointed to by the testScores member:

cout << *student1.testScores; 
----------------------------------------------------------------------------------



-----------------------------strPtr is a pointer----------------------------------
cout << *stPtr−>testScores; 
-----------------------------------------------------------------------------------


Remember: 
strPtr->testScore (-> dereference strPtr) is equivalent to (*strPtr).testScore
*strPtr->testScore (-> dereference strPtr, then * will dereference value of strPtr.testScore) is equivalent to *((*strPtr).testScore)
--------------------------------------------------------------------------------------------------------------------------------------
Expression	Description
s−>m 				s is a structure pointer and m is a member. This expression accesses the m member of the structure pointed to by s. 

*a.p 				a is a structure variable and p, a pointer, is a member. This expression dereferences the value pointed to by p.

(*s).m			s is a structure pointer and m is a member. The * operator dereferences s, causing the expression to access the m 
						member of the structure pointed to by s. This expression is the same as s−>m.
						
*s−>p				s is a structure pointer and p, a pointer, is a member of the structure pointed to by s. 
						This expression accesses the value pointed to by p. (The −> operator dereferences s and the * operator dereferences p.)
						
*(*s).p			s is a structure pointer and p, a pointer, is a member of the structure pointed to by s. 
						This expression accesses the value pointed to by p.(*s) dereferences s and the outermost * operator dereferences p. The expression *s−>p is equivalent.